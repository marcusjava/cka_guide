Generate TLS Certificates CA

1 - Generate keys

    openssl genrsa -out ca.key 2048 > ca.key

2 - Certificate Signing request 

    openssl req -new -key ca.key -out ca.csr -subj "/CN=KUBERNETES-CA" > ca.csr

3 - Sign Certificate

    openssl x509 -req -in ca.csr -signkey ca.key -out ca.crt > ca.crt


Generate admin user

1 - Generate keys

    openssl genrsa -out admin.key 2048

2 - Certificate Signing request 

    openssl req -new -key admin.key -out admin.csr -subj "/CN=kube-admin/O=system:masters"

3 - Sign Certificate

     openssl x509 -req -in admin.csr --CA ca.crt -CAkey ca.key -out admin.crt


Generate user and CertificateSigningRequest

1 - Generate keys

    openssl genrsa -out jane.key 2048

2 - Certificate Signing request 

    openssl req -new -key jane.key -out jane.csr -subj "/CN=jane"

    Convert csr in base64 encoded file

    cat marcus.csr | base64 | tr -d "\n"


3 - Generate CertificateSigningRequest with csr encoded file

4 - Wait for admin approval and get cert information in yaml
 
    k get csr
    k certificate aprove jane

Certificate details

    openssl x509 -in ca.crt -text -noout



Toda comunicação é feita de forma segura via TLS connection utilizando certificados
- Server certificados for servers
- Client certificates for clients


Posts Linkedin

1 - Criação de usuario no kubernetes


In Kubernetes, authentication is the process of verifying the identity of a user or service account,
while authorization is the process of determining what actions a user or service account is allowed to perform.
Kubernetes supports several authentication mechanisms, including client certificates, bearer tokens, and OpenID Connect.
Client certificates provide a secure way to authenticate users and services, and are commonly used in production Kubernetes clusters.
Creating a client certificate for a user involves several steps, including generating a private key, creating a certificate signing request (CSR), 
and signing the CSR with a certificate authority (CA). Let’s walk through each step in detail.

Gerando chave privada 

openssl genrsa -out user.key 2048     

Gerando CSR Certificate Signing Request

openssl req -new -key user.key -out user.csr -subj "/CN=user/O=myorg"    CN = common name, O = organization

Signing the certificate

cat marcus.csr | base64 | tr -d "\n" 

Generate marcus-csr.yaml and apply

After approve generate crt file

kubectl get csr marcus -o jsonpath='{.status.certificate}' | base64 -d > marcus.crt

Create a Config yaml file for kubeconfig

